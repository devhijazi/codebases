// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ChannelStatus {
  OPEN
  CLOSED
}

model Channel {
  id              String          @id @map("_id") @db.String
  solicitation_id String
  status          ChannelStatus   @default(OPEN)
  messages        Message[]
  users           UserOnChannel[]
  created_at      DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt

  @@map("channels")
}

model Message {
  id         String    @id @map("_id") @db.String
  content    String
  channel_id String    @db.String
  channel    Channel   @relation(fields: [channel_id], references: [id])
  user_id    String    @db.String
  user       User      @relation(fields: [user_id], references: [id])
  images     String[]
  embeds     Embed[]
  read_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  @@map("messages")
}

model Embed {
  id          String       @id @map("_id") @db.String
  title       String
  description String?
  fields      EmbedField[]
  message_id  String       @db.String
  message     Message      @relation(fields: [message_id], references: [id])
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now()) @updatedAt

  @@map("embeds")
}

model EmbedField {
  id         String   @id @map("_id") @db.String
  name       String
  value      String
  embed_id   String   @db.String
  embed      Embed    @relation(fields: [embed_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("embed_fields")
}

model User {
  id                   String                     @id @map("_id") @db.String
  full_name            String?
  avatar               String?
  messages             Message[]
  channels             UserOnChannel[]
  notifications_unread UserOnNotificationUnread[]
  notifications_read   UserOnNotificationRead[]
  created_at           DateTime                   @default(now())
  updated_at           DateTime                   @default(now()) @updatedAt

  @@map("users")
}

model UserOnChannel {
  id         String  @id @map("_id") @db.String
  user_id    String  @db.String
  user       User    @relation(fields: [user_id], references: [id])
  channel_id String  @db.String
  channel    Channel @relation(fields: [channel_id], references: [id])

  @@map("users_channels")
}

enum NotificationCategory {
  BUDGET
  MESSAGE
  SOLICITATION
  OFFER
  AUDIT_LOG
  SYSTEM
}

enum NotificationAction {
  LINK
}

model Notification {
  id           String                     @id @map("_id") @db.String
  category     NotificationCategory
  action       NotificationAction?
  content      String
  metadata     Json?
  users_unread UserOnNotificationUnread[]
  users_read   UserOnNotificationRead[]
  created_at   DateTime                   @default(now())
  updated_at   DateTime                   @default(now()) @updatedAt

  @@map("notifications")
}

model UserOnNotificationUnread {
  id              String       @id @map("_id") @db.String
  user_id         String       @db.String
  user            User         @relation(fields: [user_id], references: [id])
  notification_id String       @db.String
  notification    Notification @relation(fields: [notification_id], references: [id])

  @@map("users_notifications_unread")
}

model UserOnNotificationRead {
  id              String       @id @map("_id") @db.String
  user_id         String       @db.String
  user            User         @relation(fields: [user_id], references: [id])
  notification_id String       @db.String
  notification    Notification @relation(fields: [notification_id], references: [id])

  @@map("users_notifications_read")
}
